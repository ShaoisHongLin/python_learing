# 我们已经了解了sequence对象，在介绍字典dict之前，先要了解mapping类型：

# 先了解mapping类型：

    '''
    sequence是通过heap中开辟一块新区域，里面放置各个指针来指向具体的对象来提供连续的索引。因此内容有了索引变得有序起来，叫做序列，通过指针可以进行遍历的操作。

    mapping则与sequence不同，它只能遍历，而不具备"有序"的"索引"的特点，mapping类型的对象如:dict，它内部会具备一个迭代器，来遍历它的散列存储结构中的散列表，找到散列表的数据从而返回它们。
    接下来要介绍的就是mapping里的dict，字典对象。
    '''

    # 字典的基础知识和创建：

        # 1.字典呈现为key-value形式

        # 2.键具有唯一性：
            '''
            如果你误写了两个重复的键，那么‘后’将覆盖‘前’，如：a={'name':"shao",'age':18,'score':90,"age":20}

            后来的将前面的覆盖，覆盖后就是20
            '''

        # 3.键只能是不可变数据类型：
            '''
            键可以是str这种不可变的序列，但是不能是list等的可以变化的序列，键是很重要的，有了键才能找到实际的值，键被规定为不可变类型，是为了让键不能随意发生变动。
            '''



# 进入字典dict类型的学习：如果说[]是list的象征，那么{}就是dict的象征。


# 字典的创建和初始化：



    # 1.直接初始化

        # a={'name':"shao",'age':18,'score':90}

        # a={} 空字典对象

        # 用花括号，内部的键一般用字符串，键值之间用冒号。

    # 2.dict()生成dict对象。

        #a=dict(name="shao",age=18）

        # 用dict()生成dict对象，但是这种形式由于左右两侧是()，不方便写很多行，适合随手简单写的dict对象，里面写"等号"。


        # dict(),生成dict对象，仍旧是这个函数，它可以在括号内换一种写法，里面采用list的方括号括起tuple的小括号的键值对，以这种方式满足多行的特点：dict([ (),(),()]),里面要写"逗号"。
    
            '''
                b=dict([("name","shao"),
                        ("age",18),
                        ("score",80),
                        ])
                print(b)
            '''
        # b=dict()，也能生成空dict对象。

    

    # 3.通过zip(k,v),配对函数合并各个list对象为dict对象。  (回顾：zip函数的作用就是将多个可迭代对象，合并成一个新的同类型的对象，可以将合成后的list对象转化为dict即可)
        k=["name","age","money"]
        v=["shao","18","95"]
        d=dict(zip(k,v))

            '''
            代码示例：
                k=["name","age","money"]
                v=["shao","18","95"]
                d=dict(zip(k,v)) # 将迭代器zip配对后的对象变为dict对象
                print(d)
                print(d)

            '''
    # 4.dict.formkeys()方法：该方法只设定键，而值会生成none，括号内括起一个列表，列表内只设置key，该方法会返回一个dict对象。

            '''
            代码示例：
            f=dict.fromkeys(["name","age","score"])
            print(f)  # {'name': None, 'age': None, 'score': None}
            '''
