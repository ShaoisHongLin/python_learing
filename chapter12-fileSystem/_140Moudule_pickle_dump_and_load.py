# Serialization序列化。   series(系列)---serial(一系列的)-----serialzation(序列化)

# (一)、什么是序列化,如何理解序列化？
'''
序列化
是将"各种格式的对象"转化为特定的"串行"数据形式。(串行数据也就是由数字组成的数据流)
过程通俗来讲就是："对象"------------“010010011111000......”
这样的"串行数据"的格式便可以持久化放到硬盘或者网络传输到其它地方,作为数据传输流通的过程需要转化的形式。

等我们将数据以"串行"的方式传输到新的位置之后,我们需要将原始的内容还原回去,这个操作就叫做"反序列化"
'''

'''
序列化不仅存在在二进制的文件,照片、视频、音频、电信号、各种复杂信号,经过一些专业领域的过滤器之后,
都可以被转换成为计算机中的序列化后的串行数据,使这些原本的内容可以在网络传输中流通,到指定的位置后再还原回其本身的样子。
还原的过程就叫做"反序列化"
'''

# (二)dat文件格式

'''
作为程序编写者，我们只需要在意这个文件是否是人类可读的文本文件，还是人类不可理解的二进制文件。
二进制文件我们就简单地记作.dat文件
(广义上来说，文字、图片、声音、视频都可以保存为“.dat”文件,含义是data,数据文件。它们会以二进制的形式储存在“.dat”文件中)

我们作为程序编写的过程中,其实并不需要深究是音频、是视频之类的内容,统一改成.dat的data文件,而不对其进行绝对化的定义。
'''

# (二)、python中的序列化模块:pickle

# pickle是python中 的持久化模块，在python中实现了关于序列化和反序化的二进制协议,
# 用于将python中的对象通过序列化操作转化为可以传输的串行数据(字节流)
# 术语pickling的产生是源于开发者用英文"泡菜pickle"的意思进而延伸出"暂时保存食物/物品"这种比喻义。
# 比如pickle a project,意思是“暂时保留这个项目”。
# 因此python的开发团队将此模块pickle作为"序列化"，作为"保存数据的用途"的模块。

# 1.最常用的pickle.dump(data,file)-------- 第一个参数位置是数据对象data，第二个参数是文件对象file
# dump的大致意思就是顺手丢掉。进而可以理解为，抛售，垃圾场等意思。
#它带有对于该事务的不重视或者该事务容易被抛弃的含义。
#对于计算机中，大量的动态数据，本就带有不被重视的意义，我们进行dump随时拿出，就很好理解为“转存”，进行持久化的操作。


# 2.最常用的pickle.load(file)---------------并返回一个data对象,该返回值需要对象来接收。

# load就是加载，把序列化的数据再unpickling进行反序列化的操作。



import pickle

with open(r"f:\1234.dat","wb")as f:
   
    name="shao"
    age=21
    score=[90,85,65]
    resume={"name":name,"age":age,"score":score}
    '''
    当然这里也可以写成:
    resume={
        'name': "shao",
        'age': 21,
        'score': [90,85,65]
    }

    '''
    pickle.dump(resume,f)    # pickle代表序列化、dump代表再转存的(替代原本txt文件的写入)操作，
'''
由于二进制文件不是为人类准备的,所以说我们设定的数据在dat文件中及时打开也会是乱码形式
'''




'''
接下来是读取操作
'''
with open(r"f:\1234.dat","rb")as f:
    resume2=pickle.load(f)    # 这里的load也就是和dump的反向操作，进行unpickling反序列化操作，返回数据对象，并用变量接收 
    print(resume2)