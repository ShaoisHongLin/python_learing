# 我们使用filesystem的最常用的操作就是"open文件"或者"with配合open"的操作

# Garbled character problem:字符乱码问题：简单来说，分为写入的内容，和显示的内容。
# 写入时候应用了一种编码，而显示的内容使用了一种编码就会造成乱码问题。


'''
问：字符乱码问题是如何出现的？
    我们在写入一整个过程中,又分为几个步骤.可能存在"需要手动指定编码"的问题(否则就会使用默认编码)。
    读的一整个过程中,也又分为几个步骤.也可能存在"需要手动指定编码"的问题(否则就会使用默认编码)。

    
答(一)写入过程的编码问题：
    我们的操作系统默认有一个编码   windows默认是GBK(或者cp1252也称为Windows-1252).而linux默认本就是是UTF-8。
    而我们使用open()的过程中。
    假如不是写成f=open(r"f:\123456.txt","r","utf8")第三个参数这里规定了字符编码方式。
    
    那么默认就会使用操作系统的编码方式进行此次w或者r的写入或者读取。
    
    f=open(r"f:\123456.txt","r")----------------采用了windows的GBK又或者cp1252进行写入
    f.write("可能变为乱码的汉字示例")--------------采用GBK写入的内容是"可能变为乱码的汉字示例"
    f.close()--------------------------关闭

以上就是"写入过程"中产生的乱码的主要原因,而Python所使用的编辑器,无论是默认的UNICODE还是后面什么时候改的UTF-8.
针对编辑器的改动只是对于编辑器的"保存和显示"而言。与写入过程的乱码无关。



答(二)显示过程的编码问题:
    当曾经写入进文件里面的写入过程使用了一种特定的编码。我们的显示时候也要切换为同样的编码格式才能正确显示。
    比如:写入时候通过open写入了GBK的编码,那么我们"读、显示"也会有编码的问题。
    
    1.假设我们直接在VSCODE中浏览该GBK文件.VSCODE往往在右下角或左下角有当前的字符编码。
    如果是默认的python的UNICODE、再或者如果是曾修改为UTF-8,在VSCODE中会显示为乱码。

    2.假设我们在普通的简陋记事本中打开,txt文件,txt文件的字符为UTF-8,照样会乱码。

    3.假设我们在notepad++等高级编辑器记事本打开,如果设置为UTF-8的显示和存储格式,照样会显示乱码。

    但如果可以修改的话,无论是修改VSCODE、还是普通记事本、还是notepad++,只要修改掉"显示"所用的字符格式,
    就可以把原本正确写入但是显示为乱码的地方转变为期待的显示内容。

答(三)总结问题:

只要是"写入采用的编码"与"显示内容时候采用的编码"是两个形式，那么就会导致乱码的产生。
'''

# 不主动修改写入过程的编码方式,采用系统默认编码方式的示例
with open(r"f:\123456.txt","w") as f:           # 采用了windows的GBK又或者cp1252进行写入
    f.write("可能变为乱码的汉字示例")



# 主动修改写入过程的编码方式 的示例
with open(r"f:\123456.txt","w",encoding="utf-8") as f:           # 采用了windows的GBK又或者cp1252进行写入
    f.write("可能变为乱码的汉字示例")



'''
像主动修改写入过程这段示例一样，
对于我们经常使用汉字的记事本,往往读取时候常年使用的用于显示内容的工具都是UTF-8。
因此中文地区的程序员编辑程序时候,最好将"写入的步骤",用UTF-8.这样后面读或者显示的时候往往也是UTF-8.就会吻合了。
'''


# 顺便讲解一下wrtie()和writelines()的区别。  wrtie内传递的参数是一个字符串。writelines()传递的一个字符串的列表。

# writeline虽然是写入多个字符串，但是不会把它们换行，仍是挤在同一行里面，如果需要换行，需要在每个字符里面增加\n的内容。
with open(r"f:\123456.txt","w",encoding="utf-8")as f:
    s=["字符串1","字符串2\n","字符串3\n","字符串4"]
    f.writelines(s)

'''
另外,对于跟操作系统打开磁盘的写入通道的过程,我们要及时关闭。
可以写成第一种传统形式:try except,用try except使得出现异常时候能正确地退出。finally关闭写入的通道。

也可以使用第二种with上下文管理器。用with也可以直接替代.传统的try except finally.的等价内容。

总之我们要确保f.close()的关闭操作,以及对读写过程出现异常而做出处理。
'''


'''
另外,关于字符集编码的常见类型,这里还专门总结了一个关于字符集编码的总结图片,在本目录的_136的.png文件
'''