# 格式化字符串"{}"，以及"用format传入将要被格式化的字符串到{}内".



# 对字符串的格式化需要两个步骤：

# 1.在" "双引号包围的字符串中，选中一个位置放置{}花括号。

#  在花括号中，设置一个可以被引用的量，如变量name，如序号0，1，2，可以理解为，对该花括号"设置特征"。

#  在设置好"可引用的名称"的后面，用冒号+"规则"。

#  “规则”可以设置，"类型，精度，对齐方式，最小宽度，填充小符号"这些量。

#  2.设置{}的规则之后，为花括号内传入"将要被格式化的内容"，可以"以"键"="值"的方式"传入它们,也可以"按{1}{2}{3}顺序"传入它们的值。

'''

首先是，花括号内部的知识：
# 1.需要先一步在该字符串中用{}表示'预格式化的地方'

# 预格式化{}内部第一个位置：
    <1>name,id、这种变量起名的格式放在最左侧，如"{name}"
    <2>0、1、2、3、这种阿拉伯数字的格式放在最左侧，如{0}{1}{2}

# 预格式化{}内部第二个位置
     <1> `:` 后接‘规范’如：{  :.2f} {   :^}  {   : }
		# 规范的选项参数：
			(1) `.`            精度符号，如{   : .2f}  格式为2位精度float
			(2) `d` `f` `b` `x`类型符号，如{   : .d}   格式为整型
			  # Decimal整、float浮、binary二、x十六。

			(3) `<`  `^`  `>`  对齐符号，如{   : >}    格式为右侧对齐

            -(4) `10`           最小宽度(必须紧跟:后面) ,如{  :10}
                                            #格式为宽最小为10，不满则空格补齐
           -(5) `任意非特殊符号`  填充符号，如{  :*8}     #格式为用星号填充，需规定宽度。
'''




'''

接着是，利用形容"asd{}asdadff"format(),在format()内,向花括号内传入需要被格式化的字符串。

'''

# 2.用{}.format()函数处理{}的部分。
#  第一种：先赋值，再处理.




format(`变量`=`值`)             

'''
如:format(name="shao") 
这种就是键值对的方式向花括号内传入字符串。
'''

#  第二种：直接传入按顺序传入相应的字符，进行处理。

format(`1`=`值`)                

'''
如:format(1=666)
这种就是号位的方式向花括号内传入字符串。

另外，如果不用号位，那就是顺序这传入对应位置的字符串。format(str1,str2)                   
 
如:
str1="abcd"
str2="defg"
formatted_text = "{:.f}{:.f}".format(str1,str2)
'''

# 按要求：填充 宽度 排版 精度 类型完成下面练习题。
# 练习题：假设有一组数据，其中包括用户名、4位卡号、余额。这三样数据，如果程序中要求你将它们以字符串打印出来的语句，并符合特定规范。

'''  
1. 用户名，左对齐，宽度为15，使用`-`进行填充。  
2. 四位卡号，右对齐，宽度为4  
3. 账户余额，包括小数点后两位精度，总宽度为10（包括小数点和两位小数），使用`*`进行填充，并且确保数字右对齐。  

详细示例：  
Alice---------- 0029 ****1234.56  

'''
# 1.写好花括号的部分
output_preformat = "{name:-<15}{card:>4}{balance:*>10.2f}"

# 2.用字符串对象的内置函数.format()，将需要被格式化的字符串，传入花括号位置。
formatted_output = output_preformat.format(name="Alice", card='4430', balance=1234.56)
print(formatted_output)
