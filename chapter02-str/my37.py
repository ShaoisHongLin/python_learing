# format字符串格式化

'''
format的操作
# 1.需要先一步在该字符串中用{}表示'预格式化的地方'

# 预格式化{}内部第一个位置：
    <1>name,id、这种变量起名的格式放在最左侧，如"{name}"
    <2>0、1、2、3、这种阿拉伯数字的格式放在最左侧，如{0}{1}{2}

# 预格式化{}内部第二个位置
     <1> `:` 后接‘规范’如：{  :.2f} {   :^}  {   : }
		# 规范的选项参数：
			(1) `.`            精度符号，如{   : .2f}  格式为2位精度float
			(2) `d` `f` `b` `x`类型符号，如{   : .d}   格式为整型
			  # Decimal整、float浮、binary二、x十六。

			(3) `<`  `^`  `>`  对齐符号，如{   : >}    格式为右侧对齐
           -(4) `10`           最小宽度(必须紧跟:后面) ,如{  :10}
                                            #格式为宽最小为10，不满则空格补齐
           -(5) `任意非特殊符号`  填充符号，如{  :*8}     #格式为用星号填充，需规定宽度。
'''
# 2.用format对其进行
#  第一种：先赋值，再处理.
'''
format(`变量`=`值`)             如format(name="shao") 
format(`1`=`值`)                如format(1=666)
'''
#  第二种：直接传入按顺序传入相应的字符，进行处理。
'''
format(str)                   

                如: formatted_text = "{:^10}".format("left")
'''

# 示例1：预格式化,简答的变量替换
a = "{key}"
e = a.format(key="value")
print(e)

# 示例2：用数字or直接对应位置传入字符
b = "{0}  {1}  {2}"
c = b.format("第1处被format格式化写进去", "第2处被format格式化写进去", "第3处被format格式化写进去")
print(c)

# 按要求：填充 宽度 排版 精度 类型


# 练习题：假设有一组数据，其中包括用户名、4位卡号、余额。这三样数据，如果程序中要求你将它们以字符串打印出来的语句，并符合特定规范。

'''  
1. 用户名，左对齐，宽度为15，使用`-`进行填充。  
2. 四位卡号，右对齐，宽度为4  
3. 账户余额，包括小数点后两位精度，总宽度为10（包括小数点和两位小数），使用`*`进行填充，并且确保数字右对齐。  

详细示例：  
Alice---------- 0029 ****1234.56  

'''

output_preformat = "{name:-<15}{card:>4}{balance:*>10.2f}"
# 第一步设定预格式化的字符串
formatted_output = output_preformat.format(name="Alice", card='4430', balance=1234.56)
print(formatted_output)