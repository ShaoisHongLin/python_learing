# join()的讲解

# 1."".join()默认直接拼接
a = ['abc', 'def', 'ghi']
b = "".join(a)
print(b)
# abcdefghi

# 2."内容".join()    衔接处加上内容
c = "<衔接处加上内容>".join(a)
print(c)
# abc<衔接处加上内容>def<衔接处加上内容>ghi

# 问：我们为什么要使用join()拼接字符串，而不是用字符和字符的'+'链接呢？
'''  
join()运行分为两步：  
1.计算所要拼接的字符最终的总长度，决定分配多少内存  
2.创建对象，将它们在内存中连续存储在一起。  
'''

'''  
字符串的'加号'拼接：内存效率低下。  
举两个例子： 1.写成一行的字符串的连续用加号拼接  
str='a'+'b'+'c'+'d'  
由于字符串的不可变行，这简单的一行连续相加，创建了4次新的对象，旧对象也消亡了多次  
[1] 'a'、'b'的消亡，'ab'的产生  
[2] 'ab'、'c'的消亡，'abc'的产生......  
[3] ......  
[4] ......  

2.如果利用循环和加号，将字符串相拼接  
result = ""  
for s in strings:  
    result += s'''

'''  
正确的做法应该是显式地使用join来对已知字符串进行拼接：  
result=''.join(s)  
'''