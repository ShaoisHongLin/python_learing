# 闭包单独拿出来一个知识节讲解：前面_92中提到了。

'''
    闭包

    -----闭包是编程中的一种概念和做法。

    -----目的是:实现功能的"隐藏且封装"


    具体做法:
        1.在外围函数中,内部的嵌套函数通过nonlocal影响了外围函数.
        2.外围函数需要return嵌套函数的对象,这样嵌套函数就成功'闭包'了。
        3.这一部分可以单独放到一个函数名内,单独拿出来调用,这就是闭包。
        
    它的功能就算闭包可提供给更外界了,而且具有隐藏性。
'''
# 代码示例：闭包简单示例：闭包的关键在于外围函数return内层函数的对象名。
    

def outer(x):
    y = 5
    def inner(z):
         return x + y + z
    return inner           # -----------------自我总结：闭包的关键在于外围函数return内层函数的对象名。

# 创建一个闭包
closure = outer(10)
# 调用闭包
print(closure(2))  
# 输出 17

# 这里的closure你可以换成自己想的一个函数名。
# 其实仔细找就可以发现，它是由嵌套函数在其它函数内，加上闭包的手法实现的。
# 具有封装的功能：可以单独拿出来使用。
# 以及隐藏性，比较不易发现它是哪个函数的中内层的嵌套函数.