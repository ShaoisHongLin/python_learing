# "调用方法" (call-method) 即__call__()

# call-method是可调用对象特有的方法，可调用对象的特征是，该对象后面加上()直接可应用于自身对象
# 如Student()即可调用自身类的无参构造，同时也发动了call-method，即__call__(self)。


'''
用户"自定义的函数"不仅是对象,而且是可调用对象,
再比如python的内置函数对象,它们这些都是可调用对象。

“()”,小括号,作为call-method的标志,也只能在紧跟"可调用对象"才会触发,


反例：实例对象和类对象
<1.>"内部没有__call__(self)"的实例对象,它属于不可调用对象,但是可以手写一个__call__(self)来让它成为可调用对象。

<2.>类对象作为类似模板的一种对象,它也默认是不可调用对象,这是因为《类对象+()》的形式,永远被识别为"调用无参构造函数__init__(self)",
甚至在，@classmethod里面写__call__(self)这种做法,也不会取代__init__(self)的无参构造调用的地位。

'''
# 1.以自定义函数对象举例子，理解"自定义函数对象"属于可调用对象
def f1():
    print("f1作为自定义函数,可以f1()直接触发。")
f1()





# 2.以无参构造出一个实例对象，实例对象的内部没有__call__(self)时候，属于"不可调用对象"。

class Car:
    pass
Car() # 调用__init__(self)，无参构造出一个实例对象。
c=Car()   # 将实例对象赋值给变量c对象。
# 此处写c()-----它在调用实例对象内的__call__(self),但是该实例对象内部没有__call__(self),导致报错
'''
可以见得:实例对象的内部没有__call__(self):时候，属于"不可调用对象"
'''





# 3.实例对象内如果有__call__(self),时候属于可调用对象

class Car01:
    
    def __call__(self):
        print("本实例对象含有__call__(self)")
Car01() # 调用__init__(self)，无参构造出一个实例对象。
car01=Car01()
car01()

'''
可以见得:实例对象内要写一个"__call__(self):"时，才属于"可调用对象"
'''


# 4.类对象：

class Car02:
    pass
Car02()  # 显然__call__(self)的触发格式被__init__(self)的无参构造取代了。